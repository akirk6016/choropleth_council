---
title: "Dustin's Work"
author: "Dustin"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r}
#| message: false
# Loading all my packages 
rm(list = ls())
library(tidyverse)
library(here)
library(sf) # Vector spatial data
library(terra) # Raster spatial data
library(tidyterra) # For rasters in GGplot
library(gstat)
library(stars)
library(broom)
library(tmap)
library(spatstat)
library(patchwork)
library(stringr)

```

```{r}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  stars, # spatiotemporal data handling
  terra, # raster data handling
  raster, # raster data handling
  sf, # vector data handling
  dplyr, # data wrangling
  stringr, # string manipulation
  lubridate, # dates handling
  data.table, # data wrangling
  tidyr, # reshape
  tidyUSDA, # download USDA NASS data
  keyring, # API key management
  FedData, # download Daymet data
  daymetr, # download Daymet data
  ggplot2, # make maps
  tmap, # make maps
  future.apply, # parallel processing
  CropScapeR, # download CDL data
  prism, # download PRISM data
  exactextractr # extract raster values to sf --> i.e. zonal statistics 
)
```


# Loading data in a reasonable format and doing necessary switcheroos for my plot 

```{r}
########################### AHUPUAA .SHP FILE ################################## 
## Loading ahupuaa .shp file as 'data'
data <- st_read(dsn = here::here("data", "ahupuaa","ahupuaa.shp"), 
                layer = "ahupuaa")

## Obtaining the layers from the ahupuaa .shp file 
st_layers(dsn = here::here("data", "ahupuaa","ahupuaa.shp"))

## Converting .shp file to a simple features collection
data_sf <- st_as_sf(data) # --> EPSG 3750

## Reprojecting data to WGS84 
data_new_sf <- st_transform(data, 4326)

## Checking coordinate reference system 
st_crs(data_new_sf)

## Converting the wack apostrophies and other characters to ones R can recognize
data_sf_clean <- data_new_sf %>% 
  mutate(moku = str_replace_all(moku, pattern = "ʻ", replacement = "'"),
         mokupuni = str_replace_all(mokupuni, pattern = "ʻ", replacement = "'"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ʻ", replacement = "'"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ā", replacement = "a"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ī", replacement = "i"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ō", replacement = "o"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ē", replacement = "e"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ū", replacement = "u"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ï", replacement = "I"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ō", replacement = "O"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ā", replacement = "A")) %>% 
  janitor::clean_names()

## Rasterizing data_sf_clean (just in case )
(
data_rast <- rast(data_sf_clean)
)

## Vectorizing data_sf_clean 
data_vec <- vect(data_sf_clean)

# Filtering data to just hawaii (checking)
data_vec_hawaii <- data_sf_clean %>% filter( mokupuni == "Hawai'i") 
# Vectorizing it 
vect(data_vec_hawaii)


################################ FOOD .TIF FILE ##################################

## Loads it as a value and then rasterizing it makes it a SpatRaster
food_file <- here::here("data", "food_priority1.tif")

## Loads it directly as a RasterStack object
# (
# food_rs <- stack(here::here("data", "food_priority1.tif"))
# )

## Checking CRS 
# terra::crs(food_rs)

## Reprojecting food raster to WGS 84 
# food_rs_WGS84 <- st_transform(food_rs, 4326)

## Rasterizing food_file --> Turns to SpatRaster
(
food_rs <- rast(food_file)
)

## Tells us that the raster is projected in WGS 84 
# terra::crs(food_data)

## Turning food raster into a dataframe for plotting purposes 
food_df <- as.data.frame(food_rs, xy = TRUE) %>% 
  na.omit() %>% 
  mutate(Food = as.character(Food))

################################ CARBON .TIF FILE ##################################

## Loads it as a value and then rasterizing it makes it a SpatRaster
carbon_file <- here("data", "carbon_priority2.tif")

## Rasterizing carbon_file --> Turns to SpatRaster
(
carbon_rs <- rast(carbon_file)
)

## Turning carbon raster into a dataframe for plotting purposes
carbon_df <- as.data.frame(carbon_rs, xy = TRUE) %>% 
  na.omit() %>% 
  mutate(Carbon = as.character(Carbon))

############################## MULTI-LAYER .TIF FILE ##################################

## Loading both carbon and food files as a list
files_list <- here::here(c("data/food_priority1.tif", "data/carbon_priority2.tif"))

## Rasterizing them --> Same rows and columns, but two layers 
(
  multi_layer_rs <- rast(files_list)
)

## Converting the raster to polygons 
multi_layer_polygons <- as.polygons(multi_layer_rs)

## Converting polygons to sf 
multi_layer_sf <- st_as_sf(multi_layer_polygons)


(
data_resample <- terra::resample(data_rast, multi_layer_rs, method='bilinear')
)


multi_layer_df_food <- as.data.frame(multi_layer_rs, xy = TRUE) %>%
  filter(Food == 1 & Carbon == 0)

multi_layer_df_carbon <- as.data.frame(multi_layer_rs, xy = TRUE) %>%
  filter(Food == 0 & Carbon == 1) 

## Send this down after loading the multi_layers_sr 
values <- extract(multi_layer_rs, data_vec, fun = max, na.rm = TRUE)





ggplot(data_sf_clean) +
  stat_sf_coordinates()

ggplot(data_sf_clean) +
  geom_errorbarh(
    aes(geometry = geometry,
        xmin = after_stat(x) - 0.1,
        xmax = after_stat(x) + 0.1,
        y = after_stat(y),
        height = 0.04),
    stat = "sf_coordinates"
  )

```
## Trying to read in Carbon and Food data as one SpatRaster with two layers 

```{r}
# Cropping my multi-layer spatraster to the extent of my filtered vector 
multi_layer_hawaii_rs <- crop(multi_layer_rs, extent(data_vec_hawaii))
# Converting my cropped multi_layer_ras__hawaii raster to a dataframe 
multi_layer_hawaii_df <- as.data.frame(multi_layer_hawaii_rs, xy = TRUE)

# PLotting it over the filtered vector 
ggplot() +
  geom_sf(data = data_vec_hawaii, fill = NA) +
  geom_tile(data = multi_layer_hawaii_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "red")


data_vec_hawaii_kona <- data_vec_hawaii %>% 
  filter(moku == "Kona" | moku == "Hilo")
vect(data_vec_hawaii_kona)
multi_layer_hawaii_kona_rs <- crop(multi_layer_rs, extent(data_vec_hawaii_kona))
multi_layer_hawaii_kona_df <- as.data.frame(multi_layer_hawaii_kona_rs, xy = TRUE)

ggplot() +
  geom_sf(data = data_vec_hawaii_kona) +
  geom_tile(data = multi_layer_hawaii_kona_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "red")

## Now doing O'ahu
data_vec_oahu <- data_sf_clean %>% 
  filter(mokupuni == "O'ahu")
vect(data_vec_oahu)
multi_layer_oahu_rs <- crop(multi_layer_rs, extent(data_vec_oahu))
multi_layer_oahu_df <- as.data.frame(multi_layer_oahu_rs, xy = TRUE)

ggplot() +
  geom_sf(data = data_vec_oahu) +
  geom_tile(data = multi_layer_oahu_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "red")

## Now doing Maui County
data_vec_maui <- data_sf_clean %>% 
  filter(mokupuni == "Maui" | mokupuni == "Moloka'i" | mokupuni == "Lāna'i" | mokupuni == "Kaho'olawe" | mokupuni == "Molokini")
vect(data_vec_maui)
multi_layer_maui_rs <- crop(multi_layer_rs, extent(data_vec_maui))
multi_layer_maui_df <- as.data.frame(multi_layer_maui_rs, xy = TRUE)

erie_bathy_Cropped <- crop(x = multi_layer_rs, y = as_Spatial(data_vec_maui))

erie_bathy_df <- as.data.frame(erie_bathy_Cropped, xy = TRUE)
ggplot() +
  geom_sf(data = data_vec_maui) +
  geom_tile(data = multi_layer_maui_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "red")

## Now doing Kauai 
data_vec_kauai <- data_sf_clean %>% 
  filter(mokupuni == "Kaua'i")

vect(data_vec_kauai)
multi_layer_kauai_rs <- crop(multi_layer_rs, extent(data_vec_kauai))
multi_layer_kauai_df <- as.data.frame(multi_layer_kauai_rs, xy = TRUE)

ggplot() +
  geom_sf(data = data_vec_kauai) +
  geom_tile(data = multi_layer_kauai_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "red")

# Plotting my different rasters that are selected for food = 1 and carbon = 1 over the islands data 
ggplot() +
  geom_sf(data = data_vec, fill = "lightblue") +
  geom_tile(data = multi_layer_df_food, inherit.aes = FALSE, aes(x = x, y = y), fill = "green") + 
  geom_tile(data = multi_layer_df_carbon, aes(x = x, y = y), fill = "red", alpha = 0.5) +
  scale_fill_manual(values = c("Carbon" = "red", "Food" = "green"))
  # geom_sf(data = multi_layer_sf, )
  # geom_spatraster(data = multi_layer_rs,aes(fill = Carbon)) 
  



# terra::writeRaster(multi_layer_rs, "data/food_carbon_stack.tif", filetype = "GTiff", overwrite = TRUE)
```

## Trying to plot my resampled ahupuaa (convert it to df too)

```{r}
ahupuaa_resample_df <- as.data.frame(ahupuaa_resample, xy = TRUE)
```

## Plotting food data frame 

```{r}

food_df_plot <- ggplot(data = food_df) + 
  geom_tile(aes(x = x, y = y, fill = Food)) + 
  scale_fill_manual(values = c("green", "red")) + 
  coord_equal() + 
  theme_dark()

food_df_plot
  

# f <- plot(food_data)
# rect(par("usr")[1], par("usr")[3],
#      par("usr")[2], par("usr")[4],
#      col = "#8F8F8F")
# par(new = TRUE)
# f2 <- plot(food_data)
```





```{r}
carbon_df_plot <- ggplot(data = carbon_df) + 
  geom_tile(aes(x = x, y = y, fill = Carbon)) + 
  scale_fill_manual(values = c("green", "red")) + 
  coord_equal() + 
  theme_dark()

carbon_df_plot

```











