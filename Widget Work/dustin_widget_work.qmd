---
title: "Dustin's Work"
author: "Dustin"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r}
# Loading all my packages 
rm(list = ls())
library(tidyverse)
library(here)
library(sf) # Vector spatial data
library(terra) # Raster spatial data
library(tidyterra) # For rasters in GGplot
library(gstat)
library(stars)
library(broom)
library(tmap)
library(spatstat)
library(patchwork)
library(stringr)

if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  data.table, # data wrangling
  tidyr, # reshape
  tidyUSDA, # download USDA NASS data
  keyring, # API key management
  raster,
  FedData, # download Daymet data
  daymetr, # download Daymet data
  future.apply, # parallel processing
  CropScapeR, # download CDL data
  prism, # download PRISM data
  exactextractr # extract raster values to sf --> i.e. zonal statistics 
)
```


# Loading data in a reasonable format and doing necessary switcheroos for my plot 

```{r}
#### AHUPUAA .SHP FILE ####
## Loading ahupuaa .shp file as 'data'
data <- st_read(here::here("data", "ahupuaa","ahupuaa.shp")) %>% 
  janitor::clean_names()

## Obtaining the layers from the ahupuaa .shp file 
st_layers(dsn = here::here("data", "ahupuaa","ahupuaa.shp"))

## Converting .shp file to a simple features collection

data_sf <- st_as_sf(data) # --> EPSG 3750

## Reprojecting data to WGS84 
(
data_new_sf <- st_transform(data, 3750)
)
## Checking coordinate reference system 
st_crs(data_sf)

## Converting the wack apostrophies and other characters to ones R can recognize
data_sf_clean <- data_sf %>% 
  mutate(moku = str_replace_all(moku, pattern = "ʻ", replacement = "'"),
         mokupuni = str_replace_all(mokupuni, pattern = "ʻ", replacement = "'"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ʻ", replacement = "'"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ā", replacement = "a"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ī", replacement = "i"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ï", replacement = "i"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ō", replacement = "o"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ē", replacement = "e"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "ū", replacement = "u"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ï", replacement = "I"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ō", replacement = "O"),
         ahupuaa = str_replace_all(ahupuaa, pattern = "Ā", replacement = "A")) %>%
  mutate(moku = ifelse(
    ahupuaa == "Kiauea", "Ko'olau", moku),
    mokupuni = ifelse(ahupuaa == "Kiauea" & moku == "Ko'olau", "Kaua'i", mokupuni
      
    )) %>% 
  mutate(county = case_when(
    mokupuni == "Kaua'i" ~ "Kaua'i and Ni'ihau",
    mokupuni == "Ni'ihau" ~ "Kaua'i and Ni'ihau",
    mokupuni == "Molokini" ~ "Maui County",
    mokupuni == "Maui" ~ "Maui County",
    mokupuni == "Moloka'i" ~ "Maui County",
    mokupuni == "Lāna'i" ~ "Maui County",
    mokupuni == "Kaho'olawe" ~ "Maui County",
    mokupuni == "Hawai'i" ~ "Hawai'i",
    mokupuni == "O'ahu" ~ "O'ahu"
  )) %>% 
  janitor::clean_names()

## Rasterizing data_sf_clean (just in case )
(
data_rast <- rast(data_sf_clean)
)

## Vectorizing data_sf_clean 
data_vec <- vect(data_sf_clean)

## Trying to convert data_vec to observation window 

ahupuaa_Owin <- as.owin(sf::st_as_sf(data_vec))
class(ahupuaa_Owin)
# Filtering data to just hawaii (checking)
data_vec_hawaii <- data_sf_clean %>% filter( mokupuni == "Hawai'i") 
# Vectorizing it 
vect(data_vec_hawaii)
data_owin_hawaii<- as.owin(sf::st_as_sf(data_vec_hawaii))

#### FOOD .TIF FILE #####

## Loads it as a value and then rasterizing it makes it a SpatRaster
food_file <- here::here("data", "food_priority1_100m.tif")

## Loads it directly as a RasterStack object
# (
# food_rs <- stack(here::here("data", "food_priority1_100m.tif"))
# )

## Checking CRS 
# terra::crs(food_rs)

## Rasterizing food_file --> Turns to SpatRaster
(
food_rs <- rast(food_file)
)

## Tells us that the raster is projected in WGS 84 
terra::crs(food_rs)

## Turning food raster into a dataframe for plotting purposes 
food_sf <- food_rs %>% 
  as.points(., values=TRUE, na.rm=TRUE, na.all=FALSE) %>% 
  st_as_sf( xy = TRUE) %>% 
  na.omit() %>% 
  mutate(Food = ifelse(Food > 0, 1, 0),
    Food = as.character(Food))

food_ones <- food_sf %>% 
  filter(Food == 1) %>% 
  summarise(n = n())

#### CARBON .TIF FILE ####

## Loads it as a value and then rasterizing it makes it a SpatRaster
carbon_file <- here("data", "carbon_priority2_100m.tif")

## Rasterizing carbon_file --> Turns to SpatRaster
(
carbon_rs <- rast(carbon_file)
)

## Turning carbon raster into a dataframe for plotting purposes
carbon_sf <- carbon_rs %>% 
  as.points(., values=TRUE, na.rm=TRUE, na.all=FALSE) %>% 
  st_as_sf( xy = TRUE) %>% 
  na.omit() %>% 
  mutate(Carbon = ifelse(Carbon > 0, 1, 0),
    Carbon = as.character(Carbon))
carbon_ones <- carbon_sf %>% 
  filter(Carbon == 1) %>% 
  summarise(n = n())
############################## MULTI-LAYER .TIF FILE ##########################

## Loading both carbon and food files as a list
files_list <- here::here(c("data/food_priority1_100m.tif", "data/carbon_priority2_100m.tif"))

## Rasterizing them --> Same rows and columns, but two layers 
(
  multi_layer_rs <- rast(files_list)
)

## Converting the raster to polygons 
(
multi_layer_polygons <- as.polygons(multi_layer_rs)
)
## Converting polygons to sf 
multi_layer_sf <- st_as_sf(multi_layer_polygons)


(
data_resample <- terra::resample(data_rast, multi_layer_rs, method='bilinear')
)

multi_layer_df <- as.data.frame(multi_layer_rs, xy = TRUE)

multi_layer_df_longer <- multi_layer_df %>% 
  mutate(Food = as.factor(Food),
         Carbon = as.factor(Carbon)) %>% 
  pivot_longer(cols = c("Food", "Carbon"),
               names_to = "priority",
               values_to = "foodcarbon")

multi_layer_df_food <- as.data.frame(multi_layer_rs, xy = TRUE) %>%
  filter(Food == 1 & Carbon == 0)

multi_layer_df_carbon <- as.data.frame(multi_layer_rs, xy = TRUE) %>%
  filter(Food == 0 & Carbon == 1) 

## Trying to convert it to points 
multi_layer_ppp_dustin <- as.points(multi_layer_rs, values=TRUE, na.rm=TRUE, na.all=FALSE) 

multi_layer_ppp_sf_dustin <- st_as_sf(multi_layer_ppp_dustin, xy = TRUE) %>% 
  mutate(Carbon = ifelse(Carbon > 0, 1, 0),
         Food = ifelse(Food > 0, 1, 0)) %>% 
  pivot_longer(cols = c("Food", "Carbon"),
               names_to = "priority",
               values_to = "foodcarbon")

## Send this down after loading the multi_layers_sr 
values <- raster::extract(multi_layer_rs, data_vec, fun = max, na.rm = TRUE)

########################### LAND USE COVER DATA ###############################

# Success he thinks it will be useful! 
(
landuse <- st_read(here::here("data/Land_Use_Land_Cover_(LULC)/Land_Use_Land_Cover_(LULC).shp")) 
)
(
landuse <- st_transform(landuse, 3750)
)
landuse_sf <- st_as_sf(landuse) %>% 
  mutate(landcover = as.factor(landcover)) %>% 
  mutate(resample = case_when(
    landcover == "0" ~ "No classification",
    landcover == "11" ~ "Urban or Built-Up",
    landcover == "12" ~ "Urban or Built-Up",
    landcover == "13" ~ "Urban or Built-Up",
    landcover == "14" ~ "Urban or Built-Up",
    landcover == "15" ~ "Urban or Built-Up",
    landcover == "16" ~ "Urban or Built-Up",
    landcover == "17" ~ "Urban or Built-Up",
    landcover == "21" ~ "Agriculture",
    landcover == "22" ~ "Agriculture",
    landcover == "23" ~ "Agriculture",
    landcover == "24" ~ "Agriculture",
    landcover == "31" ~ "Rangeland",
    landcover == "32" ~ "Rangeland",
    landcover == "33" ~ "Rangeland",
    landcover == "42" ~ "Forest Land",
    landcover == "51" ~ "Water",
    landcover == "52" ~ "Water",
    landcover == "53" ~ "Water",
    landcover == "54" ~ "Water",
    landcover == "61" ~ "Wetlands",
    landcover == "62" ~ "Wetlands",
    landcover == "72" ~ "Barren",
    landcover == "73" ~ "Barren",
    landcover == "74" ~ "Barren",
    landcover == "75" ~ "Barren",
    landcover == "76" ~ "Urban or Built-Up",
    landcover == "77" ~ "Barren",
  )) %>% 
  mutate(resample = as.factor(resample)) %>% 
  dplyr::select(!c(createdate, createdby, modifiedda, modifiedby, agency, deliveryda, sourceid, severity, publishdat, comments, featureuid))

landuse_vec <- vect(landuse_sf)

## Intersecting the ahupuaa and landuse dataframe to obtain total area (ha)

intersected_polygons <- sf::st_intersection(data_sf_clean, landuse_sf)

intersected_priority_ <- sf::st_intersection(multi_layer_ppp_sf_dustin, intersected_polygons)

intersected_carbon <- sf::st_intersection(data_sf_clean, ahu_intersect_carbon_sf)

## Summing landuse coverage per ahupua'a
area_landuse_sum <- intersected_polygons %>% 
  group_by( moku, mokupuni, county, resample) %>% 
  summarize(landuse_ha = sum(st_areasha, na.rm = TRUE)*(1^-4)) %>% 
  ungroup()

############################### MAX'S INTERSECTED DFS ##########################
ahu_intersect_carbon_sf <- read_sf(here("data/ahu_model_intersect/ahupuaa_carbon_intersect.shp"))

ahu_intersect_food_sf <- read_sf(here("data/ahu_model_intersect/ahupuaa_food_intersect.shp"))


```

## Initital plots 

```{r}
ggplot() + 
  geom_sf(data = landuse_sf, aes(fill = resample, color = resample)) + 
  theme(legend.position = "none")

ggplot() + 
  geom_sf(data = data_sf_clean)

ggplot() + 
  geom_sf(data = landuse_sf, aes(fill = resample, color = resample)) +
  geom_sf(data = data_sf_clean, color = "black", fill = NA, size = 0.75) +
  theme(legend.position = "none")
```

## Plotting intersected landuse and ahupuaa df with geom_col and geom_sf 

```{r}
ahu_carbon_df <- ahu_intersect_carbon_sf %>% 
  as.data.frame() %>% 
  dplyr::select(-geometry) %>% 
  mutate(gridcode = as.factor(gridcode))
  
ahu_food_df <- ahu_intersect_food_sf %>% 
  as.data.frame() %>% 
  dplyr::select(-geometry) %>% 
  mutate(gridcode = as.factor(gridcode))
```

### Make Area Plots

```{r}
### carbon ###
area_carbon_plot <- ggplot(ahu_carbon_df, 
                    aes(x = mokupuni, y = area_hecta, fill = gridcode)) +
  geom_col(position = "dodge", color = "black", linewidth = 0.2) +
  theme_bw() +
  scale_fill_manual(values = c("grey", "forestgreen")) +
  labs(x = "Mokupuni", y = "Area (ha)", 
       fill = "Model Output", title = "Carbon Storage") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

area_carbon_plot


### food ##
area_food_plot <- ggplot(ahu_food_df, 
                    aes(x = mokupuni, y = area_hecta, fill = gridcode)) +
  geom_col(position = "dodge", color = "black", linewidth = 0.2) +
  theme_bw() + 
  scale_fill_manual(values = c("grey", "orange")) +
  labs(x = "Mokupuni", y = "Area (ha)", 
       fill = "Model Output", title = "Food Production") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

area_food_plot
```
### Moving on from maps and calculating zonal statistics (I think)

```{r}
## Filtering out Oahu
intersected_oahu <- area_landuse_sum %>% 
  filter(county == "O'ahu")

ggplot() + 
  geom_col(data=intersected_oahu, aes(x = moku, y = landuse_ha, fill = resample), position = "dodge") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~mokupuni, scales = "free")

ggplot() + 
  geom_sf(data = intersected_oahu, aes(fill = resample)) 

## Filtering out Hawaii
intersected_hawaii <- area_landuse_sum %>% 
  filter(county == "Hawai'i")

ggplot() + 
  geom_col(data=intersected_hawaii, aes(x = moku, y = landuse_ha, fill = resample), position = "dodge") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~mokupuni, scales = "free")

ggplot() + 
  geom_sf(data = intersected_hawaii, aes(fill = resample)) 

## Filtering out kauai
intersected_kauai <- area_landuse_sum %>% 
  filter(mokupuni == "Kaua'i")

ggplot() + 
  geom_col(data=intersected_kauai, aes(x = moku, y = landuse_ha, fill = resample), position = "dodge") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~mokupuni, scales = "free")

ggplot() + 
  geom_sf(data = intersected_kauai, aes(fill = resample)) 

## Filtering out Maui County
intersected_maui <- area_landuse_sum %>% 
  filter(county == "Maui County")

ggplot() + 
  geom_col(data=intersected_maui, aes(x = moku, y = landuse_ha, fill = resample), position = "dodge") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  facet_wrap(~mokupuni, scales = "free")

ggplot() + 
  geom_sf(data = intersected_maui, aes(fill = resample)) 


```

## Choropleth!!

```{r}
## Doing it all 
vect(data_sf_clean)
multi_sf <- data_sf_clean %>% 
  st_join(multi_layer_ppp_sf_dustin)

priority_counts_sf_all <- multi_sf %>% 
  group_by(priority, ahupuaa) %>% 
  summarize(n_ones = sum(!is.na(foodcarbon)))

prior_split <- split(priority_counts_sf_all, ~priority, drop = FALSE)
  

?split
ggplot(data = priority_counts_sf_all) + 
  geom_sf(aes(group_by = priority, fill = n_ones), color = "grey90", size = 0.1) + 
  scale_fill_gradientn(colors = c("lightgray","lightgreen", "green", "forestgreen", "darkgreen")) + 
  theme_minimal()

## Hawaii
# Filtering data 
data_vec_hawaii <- data_sf_clean %>% filter(county == "Hawai'i") 
# Vectorizing it 
vect(data_vec_hawaii)
hawaii_multi_sf <- data_vec_hawaii %>% 
  st_join(multi_layer_ppp_sf_dustin)

priority_counts_sf <- hawaii_multi_sf %>% 
  group_by(ahupuaa, priority) %>% 
  summarize(n_ones = sum(!is.na(foodcarbon)))
ggplot(data = priority_counts_sf) + 
  geom_sf(aes(fill = n_ones), color = "grey90", size = 0.1) + 
  scale_fill_gradientn(colors = c("lightgray","lightgreen", "green", "forestgreen", "darkgreen")) + 
  theme_minimal()

## Oahu
# Filtering data 
data_vec_oahu <- data_sf_clean %>% filter(county == "O'ahu") 
# Vectorizing it 
vect(data_vec_oahu)
oahu_multi_sf <- data_vec_oahu %>% 
  st_join(multi_layer_ppp_sf_dustin)

priority_counts_sf_oahu <- oahu_multi_sf %>% 
  group_by(ahupuaa, priority) %>% 
  summarize(n_ones = sum(!is.na(foodcarbon)))
ggplot(data = priority_counts_sf_oahu) + 
  geom_sf(aes(fill = n_ones), color = "grey90", size = 0.1) + 
  scale_fill_gradientn(colors = c("lightgray","lightgreen", "green", "forestgreen", "darkgreen")) + 
  theme_minimal()

## Maui
# Filtering data 
data_vec_maui <- data_sf_clean %>% filter(county == "Maui County") 
# Vectorizing it 
vect(data_vec_hawaii)
maui_multi_sf <- data_vec_maui %>% 
  st_join(multi_layer_ppp_sf_dustin)

priority_counts_sf_maui <- maui_multi_sf %>% 
  group_by(ahupuaa, priority) %>% 
  summarize(n_ones = sum(!is.na(foodcarbon)))
ggplot(data = priority_counts_sf_maui) + 
  geom_sf(aes(fill = n_ones), color = "grey90", size = 0.1) + 
  scale_fill_gradientn(colors = c("lightgray","lightgreen", "green", "forestgreen", "darkgreen")) + 
  theme_minimal()

## Kauai
# Filtering data 
data_vec_kauai <- data_sf_clean %>% filter(county == "Kaua'i and Ni'ihau") 
# Vectorizing it 
vect(data_vec_kauai)
kauai_multi_sf <- data_vec_kauai %>% 
  st_join(multi_layer_ppp_sf_dustin)

priority_counts_sf_kauai <- kauai_multi_sf %>% 
  group_by(ahupuaa, priority) %>% 
  summarize(n_ones = sum(!is.na(foodcarbon)))
ggplot(data = priority_counts_sf_kauai) + 
  geom_sf(aes(fill = n_ones), color = "grey90", size = 0.1) + 
  scale_fill_gradientn(colors = c("lightgray","lightgreen", "green", "forestgreen", "darkgreen")) + 
  theme_minimal()
```


## Plotting Food and Carbon rasters and cropping to filtered ahupuaa data 

```{r}
# Cropping my multi-layer spatraster to the extent of my filtered vector 
multi_layer_hawaii_rs <- crop(multi_layer_rs, extent(data_vec_hawaii))
# Converting my cropped multi_layer_ras__hawaii raster to a dataframe 
multi_layer_hawaii_df <- as.data.frame(multi_layer_hawaii_rs, xy = TRUE)
# Cropping my land use vector to the extent of my filtered vector
landuse_hawaii_sf <- st_crop(landuse_sf, data_vec_hawaii)

# PLotting it over the file vector 
ggplot() +
  geom_sf(data = landuse_hawaii_sf, aes(fill = resample)) + 
  geom_sf(data = data_vec_hawaii, fill = NA, color = "black") +
  geom_tile(data = multi_layer_hawaii_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "#882222")  
  theme(legend.position = "none")

## Now doing O'ahu
data_vec_oahu <- data_sf_clean %>% 
  filter(county == "O'ahu")
vect(data_vec_oahu)
multi_layer_oahu_rs <- crop(multi_layer_rs, extent(intersected_oahu))
multi_layer_oahu_df <- as.data.frame(multi_layer_oahu_rs, xy = TRUE)
landuse_oahu_sf <- st_crop(landuse_sf, data_vec_oahu)
ggplot() +
  geom_sf(data = landuse_oahu_sf, aes(fill = resample)) +
  geom_sf(data = data_vec_oahu, fill = NA, color = "black" ) +
  geom_tile(data = multi_layer_oahu_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "#882222")
ggplot() + 
  geom_sf(data = intersected_oahu, aes(fill = resample)) + 
  geom_tile(data = multi_layer_oahu_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "#882222")

## Now doing Maui County
data_vec_maui <- data_sf_clean %>% 
  filter(county == "Maui County")
vect(data_vec_maui)
multi_layer_maui_rs <- crop(multi_layer_rs, extent(data_vec_maui))
multi_layer_maui_df <- as.data.frame(multi_layer_maui_rs, xy = TRUE) 
landuse_maui_sf <- st_crop(landuse_sf, data_vec_maui)

ggplot() +
  geom_sf(data = landuse_maui_sf, aes(fill = resample)) +
  geom_sf(data = data_vec_maui, fill = NA, color = "black" ) +
  geom_tile(data = multi_layer_maui_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "#882222", alpha = 0.5)

## Now doing Kauai
data_vec_kauai <- data_sf_clean %>% 
  filter(county == "Kaua'i and Ni'ihau")
# vect(data_vec_kauai)
multi_layer_kauai_rs <- crop(multi_layer_rs, extent(data_vec_kauai))
multi_layer_kauai_df <- as.data.frame(multi_layer_kauai_rs, xy = TRUE)
landuse_kauai_sf <- st_crop(landuse_sf, data_vec_kauai)
ggplot() +
  geom_sf(data = landuse_kauai_sf, aes(fill = resample)) +
  geom_sf(data = data_vec_kauai, fill = NA, color = "black" ) +
  geom_tile(data = multi_layer_kauai_df, inherit.aes = FALSE, aes(x = x, y = y), fill = "#882222")


# Plotting my different rasters that are selected for food = 1 and carbon = 1 over the islands data 
ggplot() +
  geom_sf(data = data_vec, fill = "lightblue") +
  geom_tile(data = multi_layer_df_food, inherit.aes = FALSE, aes(x = x, y = y), fill = "green") + 
  geom_tile(data = multi_layer_df_carbon, aes(x = x, y = y), fill = "#882222", alpha = 0.5) +
  scale_fill_manual(values = c("Carbon" = "#882222", "Food" = "green"))


# terra::writeRaster(multi_layer_rs, "data/food_carbon_stack.tif", filetype = "GTiff", overwrite = TRUE)
```


## Plotting food data frame 

```{r}
food_df1 <- food_df %>% 
  filter(Food == 1)
food_df0 <- food_df %>% 
  filter(Food == 0)

food_df %>% 
  mutate(Food = factor(Food))

ggplot(data = food_df1) + 
  geom_tile(aes(x = x, y = y), fill = "#882222") + 
  coord_equal() + 
  theme_dark()

ggplot(data = food_df0) + 
  geom_tile(aes(x = x, y = y), fill = "green") +
  coord_equal() + 
  theme_dark()

food_df_plot <- ggplot(data = food_df) + 
  geom_tile(aes(x = x, y = y, fill = Food)) + 
  scale_color_manual(values = c("0" = "green", "1" = "#882222")) +
  coord_equal() + 
  theme_dark()

# food_df_plot
  

# f <- plot(food_data)
# rect(par("usr")[1], par("usr")[3],
#      par("usr")[2], par("usr")[4],
#      col = "#8F8F8F")
# par(new = TRUE)
# f2 <- plot(food_data)
```





```{r}
carbon_df1 <- carbon_df %>% 
  filter(Carbon == 1)
carbon_df0 <- carbon_df %>% 
  filter(Carbon == 0)
ggplot(data = carbon_df1) + 
  geom_tile(aes(x = x, y = y), fill = "#882222") + 
  coord_equal() + 
  theme_dark()

ggplot(data = carbon_df0) + 
  geom_tile(aes(x = x, y = y), fill = "green") +
  coord_equal() + 
  theme_dark()


carbon_df_plot <- ggplot(data = carbon_df) + 
  geom_tile(aes(x = x, y = y, fill = Carbon)) + 
  scale_fill_manual(values = c("green", "#882222")) + 
  coord_equal() + 
  theme_dark()

carbon_df_plot

```


Global.r and .rm file into the ui.r 








